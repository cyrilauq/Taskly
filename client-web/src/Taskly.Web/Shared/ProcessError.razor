@using Blazored.Toast
@using Blazored.Toast.Configuration
@using Blazored.Toast.Services

@inherits ErrorBoundary
@inject ILogger<ProcessError> Logger

<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="5"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-check"
                ErrorIcon="fa fa-triangle-exclamation" />

@if (ErrorContent is not null)
{
    @ErrorContent(CurrentException)
}

@ChildContent

@code {
    [Inject]
    IToastService ToastService { get; set; }

    protected override async Task OnErrorAsync(Exception ex)
    {
        try
        {
            ToastService.ShowError("😈 A rotten gremlin got us. Sorry!");
        }
        catch (Exception toastEx)
        {
            // Log or handle exceptions related to the ToastService
            Console.WriteLine($"Toast error: {toastEx.Message}");
        }
        finally
        {
            // Re-throw the original exception if needed
            // throw ex;
        }
    }
}